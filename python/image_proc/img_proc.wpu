#!wing
#!version=4.0
##################################################################
# Wing IDE project file : User-specific branch                   #
##################################################################
[user attributes]
debug.breakpoints = {loc('cv_drawing.py'): {18: (0,
        None,
        1,
        0)}}
debug.run-args = {loc('make_roi.py'): '-i ~/comm/towel/images/data0000000000'\
                                      '00.jpg -o ~/comm/towel/once/roi_mask.'\
                                      'png'}
edit.file-encoding = {loc('image_ops.py'): 'UTF-8',
                      loc('interactive_segmentation.py'): 'UTF-8',
                      loc('matlab_image_processing.py'): 'UTF-8',
                      loc('utils_images.py'): 'UTF-8'}
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'JWJCxs15bTSL3ccFKxZ4Lfcgaf'\
        'Tf28nC',
        'size-state': '',
        'type': 'dock',
        'view': {'area': 'tall',
                 'constraint': None,
                 'current_pages': [0,
                                   2],
                 'notebook_display': 'normal',
                 'notebook_percent': 0.22916666666666663,
                 'override_title': None,
                 'pagelist': [('debug-stack',
                               'tall',
                               1,
                               {}),
                              ('indent',
                               'tall',
                               2,
                               {}),
                              ('project',
                               'tall',
                               0,
                               {'tree-state': {'file-sort-method': 'by name',
        'list-files-first': False,
        'tree-states': {'deep': {'column-widths': [1.0],
                                 'expanded-nodes': [],
                                 'selected-nodes': [],
                                 'top-node': (0,)}},
        'tree-style': 'deep'}}),
                              ('pylintpanel#02EFWRQK9X24',
                               'tall',
                               0,
                               {}),
                              ('snippets',
                               'tall',
                               0,
                               {'tree-states': {'__all__': [],
        u'c': [],
        u'django': [],
        u'html': [],
        u'py': []}}),
                              ('source-assistant',
                               'tall',
                               2,
                               {'docstring-during-complete': False,
                                'wrap-lines': True}),
                              ('browser',
                               'tall',
                               0,
                               {'all_tree_states': {u'By Module': {'column-w'\
        'idths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': None}},
                                'browse_mode': u'By Module',
                                'follow-selection': False,
                                'sort_mode': 'Alphabetically',
                                'visibility_options': {u'Derived Classes': False,
        u'Imported': False,
        u'Modules': True}})],
                 'primary_view_state': {'area': 'wide',
        'constraint': None,
        'current_pages': [3,
                          2],
        'notebook_display': 'normal',
        'notebook_percent': 0.39587932303164086,
        'override_title': None,
        'pagelist': [('bookmarks',
                      'wide',
                      1,
                      {'tree-state': []}),
                     ('debug-breakpoints',
                      'wide',
                      0,
                      {'tree-state': []}),
                     ('debug-stack',
                      'wide',
                      0,
                      {'codeline-mode': 'below'}),
                     ('debug-io',
                      'wide',
                      1,
                      {'attrib-starts': [],
                       'first-line': 0,
                       'folded-linenos': [],
                       'history': {},
                       'sel-line': 99999,
                       'sel-line-start': 5899840,
                       'selection_end': 5899840,
                       'selection_start': 5899840}),
                     ('debug-probe',
                      'wide',
                      2,
                      {'attrib-starts': [],
                       'first-line': 0,
                       'folded-linenos': [],
                       'history': {None: ['self.im_bwthin\n',
        'segs[0]\n',
        'segs\n',
        'uvs.shape\n'],
                                   u'file:/home/joschu/Dropbox/Proj/code/python/comm/test_comm.py': [''\
        'self.data\n',
        'str(self.data)\n',
        'fh\n',
        'fname\n',
        'with open(fname,"w") as fh: fh.write(str(self.data))\n',
        'self.sub\n',
        'self.sub.names.getCur()\n',
        'msg\n',
        'msg.data\n',
        'aNearB[0]\n',
        'aNearB\n',
        'aNearB[0][0]\n',
        'aNearB[0][0].data\n',
        'aNearB[0][1].data\n',
        'aData\n',
        'time\n',
        'self.msg0\n',
        'self.msg1\n',
        'self.isBetween(time):\n',
        'self.isBetween(time)\n'],
                                   u'file:/home/joschu/Dropbox/Proj/code/python/comm/write_ros_topic.py': [''\
        'rostopic\n',
        'rosMsgClass\n',
        "roslib.load_manifest('rosmsg')\n",
        'import rosmsg\n',
        'rosTopic\n',
        'extension\n',
        'comm.getDataRoot()\n',
        'comm.DATA_ROOT\n',
        'topicName\n',
        'topic\n',
        'topicPath(topic)\n',
        "topicPath('topic')\n",
        "join('data_root','hi')\n",
        "join('data_root','/hi')\n"],
                                   u'file:/home/joschu/MyROS/john_testing/move_arm_simple_pose_goal.py': [''\
        'goalA\n'],
                                   u'file:/home/joschu/Proj/code/rope/try_hog_classification.py': [''\
        'B\n',
        'gridsize\n',
        'y2.shape\n',
        'count\n',
        'out\n',
        'nbin\n',
        'angs.max()\n',
        'bin\n',
        'ang\n',
        'ang.min()\n',
        'ang.max()\n',
        'arctan2\n',
        'np.arctan2\n',
        'np.arctan2(-1,0)\n',
        'gradv\n',
        'gradu\n',
        'np.arctan2(gradv,gradu)\n',
        'np.arctan2(gradv,gradu).max()\n',
        'np.arctan2(gradv,gradu).min()\n',
        'gradu.max()\n',
        'mag\n',
        'mag.shape\n',
        'n.shape\n',
        'bin.shape\n',
        'bin.max()\n',
        'bin.min()\n',
        'mask.shape\n',
        'lab.shape\n',
        'bw_rope\n',
        'np.repeat(np.flatnonzero(bw_rope),9).shape\n',
        '12920//9\n',
        '12920/9\n',
        '12920/18\n',
        'y1.shape\n',
        'np.flatnonzero(bw_rope).shape\n',
        'ropeinds1.shape\n'],
                                   u'file:/home/joschu/Proj/code/rope_vision/rope_graph.py': [''\
        'u1\n',
        'v1\n',
        'max_label\n',
        'deg_image.max()\n',
        'u,v\n',
        'end\n',
        'uncovered\n',
        'from pylab import *\n',
        'imshow(uncovered)\n',
        'imshow(uncovered & ~thin_image)\n',
        'ucur,vcur\n',
        'u0\n',
        'v0\n',
        'deg_image[221,258]\n',
        'deg_image[221,257]\n',
        'get_neighbors(221,258)\n',
        'get_neighbors(221,257,deg_image)\n',
        'get_neighbors(221,258,deg_image)\n',
        'get_neighbors(220,259,deg_image)\n',
        'points\n',
        'neighs\n',
        'deg_image[u1,v1]\n',
        'get_neighbors(u0,v0,deg_image)\n',
        'u1,v1\n',
        'len(neighbs)\n',
        '(u1,v1),neighb\n',
        'neighbs\n',
        'neighb\n',
        'u0,v0\n',
        'seg[-1]\n',
        'segs1\n',
        'segs1[0]\n',
        'seg\n',
        'outseg\n',
        'dir1\n'],
                                   u'file:/home/joschu/Proj/code/rope_vision/test_snakes.py': [''\
        's.T.shape\n',
        'si.splev(ts,tck).shape\n',
        'c_[si.splev(ts,tck)]\n',
        'c_[si.splev(ts,tck)].shape\n',
        'si.splev(ts,tck)[0].shape\n',
        'r_[si.splev(ts,tck)].shape\n',
        'c_[*si.splev(ts,tck)].shape\n',
        's = array(si.splev(ts,tck)).shape\n',
        's\n',
        's = array(si.splev(ts,tck))\n',
        's.shape\n',
        'self.calc_E(ts)\n',
        'self.p*norm(sp) + self.q*norm(spp) + self.r*ndi.map_coordinates(sel'\
        'f.I,s).sum()       \n',
        'grad\n',
        'grad.shape\n',
        'dir.shape\n',
        'self.ctrl_pts\n'],
                                   u'file:/home/joschu/Proj/code/rope_vision/test_snakes2d.py': [''\
        'self.snake.get_curve()\n',
        'self.snake.get_curve().shape\n',
        'cv2.drawContours(image = self.snake.I,contours = self.snake.get_cur'\
        've().T,contourIdx=0,color=(255,0,0,255))\n',
        "a=cv2.distanceTransform(bw.astype('uint8'),cv.CV_DIST_L2,5)[0]\n",
        "b=cv2.distanceTransform(~bw.astype('uint8'),cv.CV_DIST_L2,5)\n",
        "b=cv2.distanceTransform(~bw.astype('uint8'),cv.CV_DIST_L2,5)[0]\n",
        '~bw\n',
        "b=cv2.distanceTransform((~bw).astype('uint8'),cv.CV_DIST_L2,5)\n",
        "b=cv2.distanceTransform((~bw).astype('uint8'),cv.CV_DIST_L2,5)[0]\n",
        'b.max()\n',
        'b.min()\n',
        "j=cv2.distanceTransform(bw.astype('uint8'),cv.CV_DIST_L2,5)[0] - cv"\
        "2.distanceTransform((~bw).astype('uint8'),cv.CV_DIST_L2,5)[0]\n",
        'j.max()\n',
        'j.min()\n',
        "cv2.distanceTransform((~bw).astype('uint8'),cv.CV_DIST_L2,5)[0] - c"\
        "v2.distanceTransform(bw.astype('uint8'),cv.CV_DIST_L2,5)[0]\n",
        "a=cv2.distanceTransform((~bw).astype('uint8'),cv.CV_DIST_L2,5)[0] -"\
        " cv2.distanceTransform(bw.astype('uint8'),cv.CV_DIST_L2,5)[0]\n",
        'a.min()\n',
        'a.max()\n',
        'speed.shape\n',
        'self.calc_E_total(self.ctrl_pts)\n',
        'self.calc_E_total(self.ctrl_pts-g)\n',
        'self.calc_E_total(self.ctrl_pts-g*1e-3)\n',
        'f(x0)\n',
        'f(x0+.1*dir)\n',
        'f(x0+1e-3*dir)\n',
        't\n',
        'f(x0+t*dir)\n',
        'f(x0+t*dir)-f(x0)\n',
        'dirderiv\n',
        'alpha\n',
        't*dirderiv\n',
        'alpha=.1\n',
        'alpha * t * dirderiv\n',
        'y-y0\n'],
                                   u'file:/home/joschu/Proj/code/rope_vision/test_tracking_2d.py': [""\
        "mlab._session.get('bwthin')\n",
        "mlab._session.eval('bwthin')\n",
        "mlab.disp('bwthin')\n",
        "mlab.disp('class(bwthin)')\n",
        "mlab.eval('bwthin')\n",
        "mlab.eval('class(bwthin)')\n",
        'self.im_bwthin\n',
        'deg_image\n',
        'u+du\n',
        'v+dv\n',
        'u\n',
        'deg.shape\n',
        'deg.shape[1]\n',
        'v\n',
        'len(segs)\n',
        'from pylab import *\n',
        'imshow(self.im_bwthin)\n',
        'imshow(self.im_rgb)\n',
        'nodes\n',
        'segs\n',
        'segs[0]\n',
        'segs[-1]\n',
        'segs[0].dtype\n',
        'cs = color_sequence(len(segs))\n',
        'cs[0]\n',
        'seg\n',
        "cv2.polylines(img=im,pts=[seg.astype('int32')],isClosed=False,color"\
        "=tuple(col))\n",
        "cv2.polylines(img=im,pts=[seg.astype('int32')],isClosed=False,color"\
        "=(0,255,255))\n",
        'tuple(col)[0]\n',
        'type(tuple(col)[0])\n',
        'col\n',
        'tuple(col)\n',
        'eval(str(tuple(col)))\n',
        'self.image_energy()\n',
        'bw = self.im_hsv[:,:,2] > .7\n',
        "cv2.distanceTransform((~bw).astype('uint8'),cv.CV_DIST_L2,5)[0].max"\
        "()\n",
        "cv2.distanceTransform((~bw).astype('uint8'),cv.CV_DIST_L2,5)[0].min"\
        "()\n",
        "cv2.distanceTransform(bw.astype('uint8'),cv.CV_DIST_L2,5)[0].max()\n",
        "cv2.distanceTransform(bw.astype('int'),cv.CV_DIST_L2,5)[0].min()\n",
        "cv2.distanceTransform(bw.astype('int32'),cv.CV_DIST_L2,5)[0].min()\n",
        '2**13\n',
        "cv2.distanceTransform(bw.astype('int8'),cv.CV_DIST_L2,5)[0].min()\n",
        "cv2.distanceTransform(bw.astype('uint8'),cv.CV_DIST_L2,5)[0].min()\n",
        'bw.max()\n',
        'bw.min()\n',
        "bw.astype('uint8').min()\n",
        "bw.astype('uint8').max()\n",
        'Snake2D(-1,1,100,uvs,self.image_energy())\n',
        'self.image_energy().max()\n',
        'self.image_energy().min()\n',
        "self.snake = Snake2D(-1,1,100,uvs.astype('float'),self.image_energy"\
        "())\n",
        'import scipy.interpolate as si\n',
        'us,vs = uvs.T\n',
        'si.splprep(uvs)\n',
        'si.splprep(uvs.T)\n',
        'si.splprep(uvs.T[0:1])\n',
        'si.splprep(uvs.T.copy()[0])\n',
        'si.splprep(uvs.T.copy()[0:1])\n',
        "si.splprep(uvs.T.astype('float').copy()[0:1])\n",
        "si.splprep(uvs.T.astype('float').copy()[0:2])\n",
        'uvs\n',
        "si.splprep(uvs.T.astype('float').copy()[0:2],s=100)\n",
        'si.splprep(uvs.T+np.random.randn(*uvs.T.shape)\n',
        'si.splprep(uvs.T+np.random.randn(*uvs.T.shape))\n',
        'si.splprep(uvs.T+np.random.randn(*uvs.T.shape)*.01)\n',
        'segs[1:] - segs[:-1]\n',
        'uvs[1:] - uvs[:-1]\n',
        'Snake2D(-1,1,100,uvs.T,self.image_energy())\n',
        'self.snake = Snake2D(-1,1,100,uvs.T,self.image_energy())\n',
        'uvs.shape\n',
        'self.snake = Snake2D(-1,1,100,uvs,self.image_energy())\n',
        'import matplotlib.pyplot as plt\n',
        'plt.imshow(im)\n',
        'plt.imshow(self.im_bwthin)\n',
        'rope_contours[0][0].shape\n',
        'rope_contours[1][0]\n',
        'rope_contours[2][0]\n',
        'rope_contours[0][0]\n',
        "rope_contours = cv2.findContours(im_bwrope.astype('uint8'),cv2.RETR"\
        "_LIST,cv2.CHAIN_APPROX_NONE)[0]\n",
        'rope_contours[0]\n',
        'rope_contours[1]\n',
        'cv2.drawContours(im,rope_contours,-1,(255,0,0))\n'],
                                   u'file:/home/joschu/Proj/hw2/p4_starter/p4.py': [''\
        'P_tkk[-300]\n',
        'dot(dot(C,P[t]),C)\n',
        'P[t].shape\n',
        "M1 = sio.loadmat('p4_a_solution__1kf_smooth_run__xfilt_xsmooth_Vfil"\
        "t_Vsmooth_loglik.mat')\n",
        "M1['xsmooth'].shape\n",
        "M1['Q'].shape\n",
        "M1['xsmooth'] - X.T\n",
        "(M1['xsmooth'] - X.T).max()\n",
        'M1["Q"]\n',
        'np.linalg.eigvals(M1["Q"])\n',
        'np.linalg.eigvals(Q)\n',
        'np.linalg.eigvals(M1["Q"]+0)\n',
        'X\n',
        'xm_tk\n',
        'xm_tk[-1]\n',
        'P_tkk[-1]\n',
        'Pm_tkk[-1]\n',
        'x_tk[-1]\n',
        'x_tk[-2]\n',
        'x_tk[-3]\n',
        'x_tk[-10]\n',
        'x_tk[-1000]\n',
        'x_tk[250]\n',
        'x_tk[100]\n',
        'x_tk[1]\n',
        'x_tk[0]\n',
        'xm_tk[0]\\\n',
        'xm_tk[0]\n',
        'x_tk[t-1]\n',
        'x_tk\n',
        'xp_tk\n',
        'xp_tk[-1]\n',
        'M1\n',
        "M1['xsmooth'][0]\n",
        "M1['Xsmoo']\n",
        "M1['xsmoo']\n",
        "M['xfilt'][:,0]\n",
        "M1['xsmoo'][:,0]\n",
        'x\n',
        'x[0]\n',
        'X1\n',
        "M1['x_filt']\n",
        "M1['xfilt']\n",
        "M1['xfilt'][:,0]\n",
        'X1[0]\n',
        "M1['xsmooth'][:,0]\n",
        'X[0]\n',
        "Q/M1['Q']\n",
        "M1['R']\n",
        'R\n',
        "M1['xsmooth']\n",
        "np.testing.assert_almost_equal(M1['xsmooth'].T,Xsmooth)\n",
        'dot(C,U[t].T)\n',
        'dot(C,U[t])\n',
        'C.shape\n',
        'U.shape\n',
        'dot(B,U[t].T)\n',
        'Q\n',
        "M1['Q']\n",
        'ss.norm.pdf(Y_tn[t],dot(C_nk,xm_tk[t]) + d_n,Vary_nn)\n',
        "ss.M1['ll']\n",
        'M1.keys()\n',
        'll\n',
        "M1['loglik']\n",
        'loglik\n',
        'logliks\n',
        'Y_tn[t] - dot(C_nk,xm_tk[t])\n',
        'd\n',
        'd_n\n',
        'cov\n',
        'R_nn\n',
        'C_nk\n',
        'Pm_tkk\n',
        'Pm_tkk[t]\n',
        'P0_kk\n',
        'Pm_tkk[0]\n',
        'Pm_tkk[1]\n',
        'Pm_tkk[2]\n',
        'Pm_tkk[3]\n',
        'Pm_tkk[4]\n',
        'Pm_tkk[5]\n',
        'Pm_tkk[6]\n',
        'Pm_tkk[7]\n',
        't\n',
        'dot(L_kn, Y_tn[t] - dot(C_nk,xm_tk[t]) - d_n)\n',
        'Y_tn[t] - dot(C_nk,xm_tk[t]) - d_n\n',
        '>>> \n',
        'xm_tk[t]\n',
        'L_kn\n',
        'Vary_nn\n',
        'Covxy_kn\n',
        'Covxy_kn.shape\n',
        'K,N\n',
        'dot(C_nk,xm_tk[t]) - d_n).shape\n',
        'dot(C_nk,xm_tk[t])\n',
        '(Y_tn[t] - dot(C_nk,xm_tk[t]) - d_n).shape\n',
        'L_kn.shape\n',
        'Y_tn[t].shape\n',
        'dot(C_nk,xm_tk[t]).shape\n',
        'd_n.shape\n'],
                                   u'file:/home/joschu/ROS/hrl/advait_sandbox/move_arm_tutorials/src/move_arm_tutorials/move_arm_simple_pose_goal.py': [''\
        'desired_pose\n',
        'desired_pose.link_name\n',
        'desired_pose.LINK_FRAME\n',
        'desired_pose.HEADER_FRAME\n',
        'desired_pose.\n',
        'desired_pose.header\n',
        'goalA\n',
        'goalA.motion_plan_request\n',
        'goalA.motion_plan_request.goal_constraints\n',
        'goalA.motion_plan_request.goal_constraints.orientation_constraints\n',
        'goalA.motion_plan_request.goal_constraints.position_constraints\n'],
                                   u'file:/home/joschu/Src/OpenCV-2.3.1/samples/python2/watershed.py': [''\
        'self.img.dtype\n',
        'self.img\n',
        'self.img.shape\n',
        'm.dtype\n',
        'cv2.watershed(self.img, m)\n',
        'm\n',
        'm.shape\n'],
                                   u'file:/home/joschu/joschu_sandbox/john_playback/playback_joints.py': [''\
        '__file__\n',
        'import os\n',
        'os.dirname(__file__)\n',
        'client\n',
        'controller\n',
        'find_action("/"+controller)\n'],
                                   u'file:/home/joschu/joschu_sandbox/john_playback/record_joints.py': [''\
        'msg.header.stamp.secs\n',
        'msg.header.stamp\n',
        'msg.header.stamp.\n',
        'msg.header.stamp.to_time\n',
        'help(msg.header.stamp.to_time)\n',
        'help(msg.header.stamp.to_sec())\n',
        'msg.header.stamp.to_sec()\n',
        'rospy.rostime()\n',
        'rospy.rostime.time()\n',
        'time()\n',
        'rospy.sleep()\n',
        'rospy.sleep(1)\n',
        'msg.header.stamp.to_time()\n',
        'rospy.rostime.get_time()\n',
        'msg.header.stamp.to_time()-rospy.rostime.get_time()\n',
        'msg.header\n',
        'msg\n',
        'len(msg.name)\n',
        'msg.name\n',
        'np.save("joint_names",msg.name)\n'],
                                   u'file:/home/joschu/joschu_sandbox/john_playback/src/record.py': [''\
        'self.count\n',
        'self.msgs\n',
        'msg.\n',
        'msg.serialize_numpy()\n',
        'from rospy.numpy_msg import numpy_msg\n',
        'numpy_msg(msg)\n',
        'numpy_msg(msg.__class__)\n',
        'msg\n',
        'type(msg)\n',
        'import numpy as np\n',
        'np.array(msg)\n',
        'msg.name\n',
        'msg.effort\n',
        'msg.velocity\n',
        'np.array([msg,msg])\n',
        'a=np.array([msg,msg])\n',
        'a.shape\n',
        'msg.position\n',
        'msg.position.shape\n',
        'msg.velocity.shape\n',
        "dt=np.dtype([('position',float,40),('velocity',float,40)])\n",
        'np.zeros(1,dt)\n',
        'q=_\n',
        'q[0]["position"] = message.position\n',
        'q[0]["position"] = msg.position\n',
        'q[0]["velocity"] = msg.position\n',
        'np.array((msg.position,msg.velocity),dtype=dt)\n',
        'np.array([(msg.position,msg.velocity)],dtype=dt)\n',
        'q=np.zeros(1,dt)\n',
        'q["position"]\n',
        'q["velocity"]\n',
        'np.array([(msg.position,msg.velocity),(msg.position,msg.velocity)])'\
        '\n',
        'np.array([(msg.position,msg.velocity),(msg.position,msg.velocity)])'\
        '.shape\n',
        'np.array([(msg.position,msg.velocity),(msg.position,msg.velocity)],'\
        'dtype=dt)\n',
        '_.shape\n',
        'w=np.array([(msg.position,msg.velocity),(msg.position,msg.velocity)'\
        '],dtype=dt)\n',
        'w["position"]\n',
        'w["position"].shape\n',
        'w["velocity"].shape\n',
        'w[0]\n',
        'w[0].position\n',
        'w[0]["position"]\n',
        'w[0]["velocity"]\n'],
                                   u'file:/home/joschu/pr2/john_sandbox/discrete_teleop/src/discete_teleop.py': [''\
        'locals()\n'],
                                   u'file:/home/joschu/pr2/john_sandbox/john_vision/scripts/pcd2rgb.py': [''\
        'fDATA\n',
        'DATA\n',
        'f\n'],
                                   u'file:/home/joschu/pr2/john_sandbox/john_vision/scripts/train_pixel_classifier.py': [''\
        '(labels==1).sum()\n',
        '(labels_small==1).sum()\n',
        'mask_small.sum()\n',
        'labels_small.sum()\n',
        'yscores\n',
        'yscores.shape\n',
        'lab.shape\n',
        '160*120\n',
        'yscores.max()\n',
        'yscores.min()\n',
        'a=rescale(yscores.reshape(*lab.shape[:2]))\n',
        'mask_small\n',
        ' rescale(yscores.reshape(*lab.shape[:2]))*255*mask_small\n',
        'rescale(yscores.reshape(*lab.shape[:2]))*255*mask_small\n',
        'a=rescale(yscores.reshape(*lab.shape[:2]))*255*mask_small\n',
        'a.max()\n',
        'a.min()\n',
        'x\n',
        'x.shape\n',
        'arr.shap\n',
        'arr.shape\n',
        'arr[predhits &~truehits].shape\n',
        'arr[predhits &~truehits]\n',
        'mask_small[:,:,None].shape\n',
        'plot_confusion(bgr,Yim,list2im(yscores>thresh,mask_small))\n',
        'plot_confusion(bgr,Yim,list2im(yscores>thresh,mask_small)).shape\n',
        'trackbar\n',
        'img.shape\n',
        'height//ratio\n',
        'width//ratio\n',
        'width\n',
        'img\n',
        'return cv2.resize(img.copy(),height//ratio,width//ratio)\n',
        'cv2.resize(img.copy(),height//ratio,width//ratio)\n',
        'mask_small.shape\n',
        '640/5\n',
        '480/5\n',
        'mask_small.dtype\n',
        'mask.dtype\n',
        'truehits.dtype\n',
        'predhits.dtype\n',
        'Yim.dtype\n',
        'Yim\n',
        'Yim.max()\n',
        'Y.dtype\n',
        'classifier.decision_function(lab[mask_small])\n',
        'df=classifier.decision_function(lab[mask_small])\n',
        'df.mean()\n',
        'df.max()\n',
        'df.min()\n',
        'df > 0\n',
        '(df > 0)==Ypred\n',
        '((df > 0)==Ypred).all()\n',
        '((df > 0)==Ypred).mean()\n',
        'classifier.label_\n',
        'classifier.coef_\n',
        'classifier.intercept_\n',
        'classifier.intercept_[0]\n',
        'classifier.intercept_[0]=1\n',
        'print classifier.intercept_[0]\n',
        'w\n',
        'q\n',
        'q = Ypred\n',
        'classifier.intercept_scaling\n',
        'q=classifier.decision_function(lab[mask_small]) > classifier.interc'\
        'ept_[0]*classifier.intercept_scaling\n',
        'q=classifier.decision_function(lab[mask_small]) > classifier.interc'\
        'ept_[0]\n',
        'q=classifier.decision_function(lab[mask_small]) > -classifier.inter'\
        'cept_[0]\n',
        'q=classifier.decision_function(lab[mask_small]) > 0\n',
        'q==Ypred\n',
        '(q==Ypred).mean()\n',
        'Ypred\n',
        'import numpy as np\n',
        '(q==np.round(Ypred)).mean()\n',
        'q.mean()\n',
        'Ypred.mean()\n',
        'np.flatnonzero(q)\n',
        'np.flatnonzero(Ypred)\n',
        '(q>0)\n',
        '(q>0)==(Ypred>0)\n',
        '((q>0)==(Ypred>0)).mean()\n',
        'np.flatnonzero(q != Ypred)\n',
        'Ypred.shape\n',
        '(q[0] == Ypred).mean()\n',
        'q[916]\n',
        'Ypred[916]\n',
        'np.flatnonzero(q[0] != Ypred)\n',
        '(q == (Ypred>0))\n',
        '(q == (Ypred>0)).mean()\n',
        'np.flatnonzero(q == (Ypred>0))\n',
        'q[0]\n',
        'np.flatnonzero(q[0] == (Ypred>0))\n',
        'y[0][0]\n',
        'q[0][0]\n',
        '(Ypred>0)[0]\n',
        'np.flatnonzero(q[0] != (Ypred>0))\n',
        '(Ypred>0)[916\\]\n',
        '(Ypred>0)[916]\n',
        'q[0][916]\n',
        'q.shape\n',
        '(np.squeeze(q) == (Ypred>0)).mean()\n'],
                                   u'file:/home/joschu/pr2/john_sandbox/john_vision/test/test_read_pcd.py': [''\
        'arr[0]\n',
        "arr['y']\n",
        'arr.shape\n',
        'arr.dtype\n',
        "arr['x']\n",
        "arr['z']\n",
        'np.loadtxt(f,dtype=dtype).reshape(HEIGHT,WIDTH)\n',
        'pc\n',
        'arr\n'],
                                   u'file:/home/joschu/pr2/john_sandbox/knots/contour_test.py': [''\
        'sqdists\n',
        'np.abs(smaller(angles-theta))*1e-3\n',
        '(np.abs(smaller(angles-theta))*1e-3).shape\n',
        'sqdists[goodpts].shape\n'],
                                   u'file:/home/joschu/pr2/john_sandbox/knots/test2.py': [''\
        'y\n',
        'x\n',
        'neigh_disps.shape\n',
        'dir.shape\n',
        'dirs\n',
        'dirs.shape\n',
        'dirs[i]\n',
        'neigh_dots.argmax()\n',
        'neigh_dots[neigh_dots.argmax()]\n',
        'dists[marked,:]\n',
        'seq12\n',
        'seq2\n',
        'seq1\n',
        'i\n',
        'pts\n',
        'marked\n',
        'seqs\n',
        'uncovered\n',
        'len(uncovered)\n',
        'dirdir\n',
        '.59*dir + .41*neigh_disps[i_best]\n',
        'neigh_disps[i_best]\n',
        'neigh_disps\n',
        'neigh_inds\n',
        'neigh_inds[i_best]\n',
        'dir\n',
        'cur_ind\n',
        'i_best\n',
        'neigh_dots\n',
        'cost\n',
        'dots\n',
        'dists\n',
        'mids.shape\n'],
                                   u'file:/home/joschu/pr2/john_sandbox/knots/test3.py': [''\
        'c_[u,v]\n',
        'u\n',
        'u.shape\n',
        'match_l2r[nn_l2l].shape\n',
        'xr[match_l2r[nn_l2l].flat]\n',
        'xr[match_l2r[nn_l2l].flatten()]\n',
        'xr[match_l2r[nn_l2l].flatten()].shape\n',
        'n_l,n_nei = nn_l2l.shape\n',
        'xr[match_l2r[nn_l2l].flatten()].reshape(n_l,n_nei,2).mean(axis=1)\n'],
                                   u'file:/home/joschu/pr2/john_sandbox/knots/test_find_curve.py': [''\
        'im\n',
        'im.max()\n'],
                                   u'file:/home/joschu/pr2/rope_manipulation/rope_vision/scripts/rope_from_pcd.py': [''\
        'X.shape\n',
        'bgr.shape\n',
        'mask.shape\n',
        '96*128\n',
        'lab_small[mask_small]\n',
        'lab_small[mask_small].shape\n',
        'mask_small\n',
        'lab_small.shape\n',
        'mask_small.shape\n',
        'skelinds\n',
        'flatnonzero((mindists < 1) & xyzok[skelinds])      \n',
        'xyzok\n',
        'xyzok.mean()\n',
        'mindists\n',
        'bgr = 255\n',
        'csegs.shape\n',
        'csegs.dtype\n',
        'csegs\n',
        '(bgr==255).sum()\n',
        '(bgr==255).all(axis=2)\n',
        '(bgr==255).all(axis=2).any()\n',
        '(bgr==255).all(axis=2).sum()\n',
        'len(csegs)\n',
        'csegs(0)\n',
        'csegs[1]\n',
        'csegs[3]\n',
        'bgr[192,202]\n',
        'bgr[202,192]\n',
        'plot_curve(bgr,csegs)\n',
        'jvpt.plot_curve(bgr,csegs)\n',
        'csegs[:,::-1]\n',
        "cv2.polylines(bgr,csegs.astype('int16'),isClosed=False,color=(255,0"\
        ",0))\n",
        "cv2.polylines(bgr,csegs.astype('int32'),isClosed=False,color=(255,0"\
        ",0))\n",
        "cv2.polylines(bgr,csegs[:,::-1].astype('int32'),isClosed=False,colo"\
        "r=(255,0,0))\n",
        "cv2.polylines(bgr,[csegs[:,::-1].astype('int32')],isClosed=False,co"\
        "lor=(255,0,0))\n",
        'csegs[0]\n',
        'bgr[217,202,:]\n',
        'bgr[202,217,:]\n',
        'bgr[:] = 0\n',
        "cv2.polylines(bgr,[csegs[:,::-1].astype('int32')],isClosed=False,co"\
        "lor=(255,0,0),thickness=10)\n",
        'bgr\n',
        '(bgr==0).all()\n',
        'bgr[:,:,0] != 0\n',
        'np.nonzero(bgr[:,:,0])\n',
        'q,w=np.nonzero(bgr[:,:,0])\n',
        'q\n',
        'w\n',
        'bgr[:,:,0]\n',
        'bgr[0,:,0]\n',
        'bgr[1,:,0]\n',
        'bgr1 = bgr.copy()\n',
        "cv2.polylines(bgr1,[csegs[:,::-1].astype('int32')],isClosed=False,c"\
        "olor=(255,0,0),thickness=10)\n",
        '(bgr1==255).sum()\n',
        'bgr.dtype\n',
        'cv2.cvtColor(bgr.copy(),cv2.COLOR_BGR2HSV)\n',
        "cv2.imshow('hi',(hsv[:,:,0] < 255*.05).astype('uint8'))\n",
        'cv2.startWindowThread()\n',
        "cv2.imshow('hi',(hsv[:,:,0] < 255*.1).astype('uint8'))\n",
        "cv2.imshow('hi',(hsv[:,:,0] < 255*2).astype('uint8'))\n",
        'cv2.waitKey(1)\n',
        'cv2.waitKey(10)\n',
        'cv2.waitKey(100)\n'],
                                   u'file:/home/joschu/pr2/rope_manipulation/rope_vision/test/test_rope_image_proc.py': [''\
        'bp0.shape\n',
        'bp1.shape\n',
        'bp2.shape\n',
        'bp0.dtype\n',
        'bp0.max()\n',
        'bp1.max()\n',
        'bp2.max()\n',
        'bp0.min()\n',
        'cv2.imshow(bp0)\n',
        '255*255*255\n',
        "np.array([255*255*255]).astype('int16')\n",
        "np.array([255*255*255]).astype('uint16')\n",
        'truescores.max()\n',
        'np.sort(truescores)\n',
        'np.sort(truescores)[-10:]\n',
        'truescores[int(.1*len(truescores))]\n',
        "np.bincount(truescores.astype('int32'))\n",
        "np.flatnonzero(np.bincount(truescores.astype('int32')))\n"],
                                   u'file:/home/joschu/pr2/rope_manipulation/rope_vision/test/test_tracking.py': [''\
        'xyz_ends\n',
        'self.xyz_rope\n',
        'rope2end\n',
        'rope[0]\n',
        'self.xyz_end[0]\n',
        'self.xyz_rope[0]\n',
        'self.xyz_rope[-1]\n',
        'self.xyz_ends\n',
        'self.bgr_plot\n',
        'cv2.imshow(self.bgr_plot)\n',
        "cv2.imshow('hi',self.bgr_plot)\n",
        'cv2.waitKey(100)\n',
        'cv2.waitKey(1000)\n',
        'cv2.waitKey(10)\n'],
                                   u'file:/home/joschu/python/image_proc/make_roi.py': [''\
        'bgr\n',
        'args.infile\n']},
                       'sel-line': 0,
                       'sel-line-start': 0,
                       'selection_end': 4,
                       'selection_start': 4}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('messages',
                      'wide',
                      2,
                      {'current-domain': 0}),
                     ('debug-modules',
                      'wide',
                      1,
                      {}),
                     ('os-command',
                      'wide',
                      1,
                      {'last-percent': 0.80000000000000004,
                       'toolbox-percent': 1.0,
                       'toolbox-tree-sel': ''}),
                     ('python-shell',
                      'wide',
                      2,
                      {'attrib-starts': [],
                       'first-line': 0,
                       'folded-linenos': [],
                       'history': {},
                       'sel-line': 3,
                       'sel-line-start': 134,
                       'selection_end': 138,
                       'selection_start': 138}),
                     ('interactive-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': u'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': u'mlab.set(',
                                       'fReverse': False,
                                       'fSearchText': u'assert(',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('batch-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': '',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': True,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 44,
                                       'fReplaceText': u'SceneConfig::',
                                       'fReverse': False,
                                       'fSearchText': u'userconfig.h',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': True},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('debug-data',
                      'wide',
                      0,
                      {}),
                     ('testing',
                      'wide',
                      0,
                      {'added-files': [],
                       'filter': '',
                       'recent-filters': None}),
                     ('debug-watch',
                      'wide',
                      1,
                      {'node-states': [],
                       'tree-state': {'column-widths': [0.40062843676355064,
        0.59937156323644936],
                                      'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': (0,)}})],
        'primary_view_state': {'editor_states': {'bookmarks': ([(loc('../comm/comm.py'),
        {'attrib-starts': [('Retimer',
                            254),
                           ('Retimer.isBetween',
                            274)],
         'first-line': 269,
         'folded-linenos': [],
         'sel-line': 275,
         'sel-line-start': 8755,
         'selection_end': 8811,
         'selection_start': 8811},
        1328397937.022615),
        (loc('classifiers.py'),
         {'attrib-starts': [('PixelClassifier',
                             20),
                            ('PixelClassifier.__init__',
                             21)],
          'first-line': 30,
          'folded-linenos': [],
          'sel-line': 21,
          'sel-line-start': 544,
          'selection_end': 578,
          'selection_start': 578},
         1328397942.4441431),
        (loc('apply_classifier_to_topic.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 17,
          'sel-line-start': 338,
          'selection_end': 356,
          'selection_start': 356},
         1328397942.7537141),
        (loc('annotation.py'),
         {'attrib-starts': [('LabelWindow',
                             90),
                            ('LabelWindow.setup',
                             112)],
          'first-line': 109,
          'folded-linenos': [],
          'sel-line': 114,
          'sel-line-start': 4181,
          'selection_end': 4197,
          'selection_start': 4197},
         1328397943.732244),
        (loc('apply_classifier_to_topic.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 17,
          'sel-line-start': 338,
          'selection_end': 356,
          'selection_start': 356},
         1328397944.191124),
        (loc('annotation.py'),
         {'attrib-starts': [('LabelWindow',
                             90),
                            ('LabelWindow.setup',
                             112)],
          'first-line': 109,
          'folded-linenos': [],
          'sel-line': 114,
          'sel-line-start': 4181,
          'selection_end': 4197,
          'selection_start': 4197},
         1328397944.5697429),
        (loc('utils_images.py'),
         {'attrib-starts': [('confusionMat',
                             8)],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 12,
          'sel-line-start': 355,
          'selection_end': 355,
          'selection_start': 355},
         1328397944.7836759),
        (loc('annotation.py'),
         {'attrib-starts': [('LabelWindow',
                             90),
                            ('LabelWindow.setup',
                             112)],
          'first-line': 109,
          'folded-linenos': [],
          'sel-line': 114,
          'sel-line-start': 4181,
          'selection_end': 4197,
          'selection_start': 4197},
         1328397945.8232689),
        (loc('apply_classifier_to_topic.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 17,
          'sel-line-start': 338,
          'selection_end': 356,
          'selection_start': 356},
         1328397946.014847),
        (loc('classifiers.py'),
         {'attrib-starts': [('PixelClassifier',
                             20),
                            ('PixelClassifier.__init__',
                             21)],
          'first-line': 30,
          'folded-linenos': [],
          'sel-line': 21,
          'sel-line-start': 544,
          'selection_end': 578,
          'selection_start': 578},
         1328397946.1896391),
        (loc('../comm/comm.py'),
         {'attrib-starts': [('Retimer',
                             254),
                            ('Retimer.isBetween',
                             274)],
          'first-line': 269,
          'folded-linenos': [],
          'sel-line': 275,
          'sel-line-start': 8755,
          'selection_end': 8811,
          'selection_start': 8811},
         1328397946.363693),
        (loc('comm_pcd2jpg.py'),
         {'attrib-starts': [('PCD2JPG',
                             4),
                            ('PCD2JPG.func',
                             9)],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 10,
          'sel-line-start': 308,
          'selection_end': 332,
          'selection_start': 332},
         1328397946.936033),
        (loc('cv_drawing.py'),
         {'attrib-starts': [('drawContours',
                             4)],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 9,
          'sel-line-start': 255,
          'selection_end': 255,
          'selection_start': 255},
         1328397947.962605),
        (loc('experiments/get_table.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 3,
          'sel-line-start': 98,
          'selection_end': 107,
          'selection_start': 107},
         1328397948.2333591),
        (loc('interactive_roi.py'),
         {'attrib-starts': [('get_polygon_and_prompt',
                             30)],
          'first-line': 11,
          'folded-linenos': [],
          'sel-line': 31,
          'sel-line-start': 1041,
          'selection_end': 1041,
          'selection_start': 1041},
         1328397948.4568369),
        (loc('interactive_segmentation.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 23,
          'sel-line-start': 731,
          'selection_end': 764,
          'selection_start': 764},
         1328397948.643204),
        (loc('label_images.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 9,
          'sel-line-start': 191,
          'selection_end': 244,
          'selection_start': 244},
         1328397948.872345),
        (loc('experiments/get_table.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 7,
          'sel-line-start': 273,
          'selection_end': 289,
          'selection_start': 289},
         1328397980.3409131),
        (loc('experiments/try_skeletonization2.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 7,
          'sel-line-start': 144,
          'selection_end': 475,
          'selection_start': 144},
         1328400414.853996),
        [loc('experiments/get_table.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 7,
          'sel-line-start': 273,
          'selection_end': 289,
          'selection_start': 289},
         1328400423.400631]],
        19),
        'current-loc': loc('experiments/get_table.py'),
        'editor-states': {loc('../comm/comm.py'): {'attrib-starts': [('Reti'\
        'mer',
        254),
        ('Retimer.isBetween',
         274)],
        'first-line': 269,
        'folded-linenos': [],
        'sel-line': 275,
        'sel-line-start': 8755,
        'selection_end': 8811,
        'selection_start': 8811},
                          loc('annotation.py'): {'attrib-starts': [('LabelWi'\
        'ndow',
        90),
        ('LabelWindow.setup',
         112)],
        'first-line': 109,
        'folded-linenos': [],
        'sel-line': 114,
        'sel-line-start': 4181,
        'selection_end': 4197,
        'selection_start': 4197},
                          loc('apply_classifier_to_topic.py'): {'attrib-star'\
        'ts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 17,
        'sel-line-start': 338,
        'selection_end': 356,
        'selection_start': 356},
                          loc('classifiers.py'): {'attrib-starts': [('PixelC'\
        'lassifier',
        20),
        ('PixelClassifier.__init__',
         21)],
        'first-line': 30,
        'folded-linenos': [],
        'sel-line': 21,
        'sel-line-start': 544,
        'selection_end': 578,
        'selection_start': 578},
                          loc('comm_pcd2jpg.py'): {'attrib-starts': [('PCD2J'\
        'PG',
        4),
        ('PCD2JPG.func',
         9)],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 10,
        'sel-line-start': 308,
        'selection_end': 332,
        'selection_start': 332},
                          loc('cv_drawing.py'): {'attrib-starts': [('drawCon'\
        'tours',
        4)],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 9,
        'sel-line-start': 255,
        'selection_end': 255,
        'selection_start': 255},
                          loc('experiments/get_table.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 4,
        'sel-line-start': 61,
        'selection_end': 84,
        'selection_start': 84},
                          loc('experiments/try_skeletonization2.py'): {'attr'\
        'ib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 7,
        'sel-line-start': 144,
        'selection_end': 475,
        'selection_start': 144},
                          loc('interactive_roi.py'): {'attrib-starts': [('ge'\
        't_polygon_and_prompt',
        30)],
        'first-line': 11,
        'folded-linenos': [],
        'sel-line': 31,
        'sel-line-start': 1041,
        'selection_end': 1041,
        'selection_start': 1041},
                          loc('interactive_segmentation.py'): {'attrib-start'\
        's': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 23,
        'sel-line-start': 731,
        'selection_end': 764,
        'selection_start': 764},
                          loc('label_images.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 9,
        'sel-line-start': 191,
        'selection_end': 244,
        'selection_start': 244},
                          loc('make_roi.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 24,
        'sel-line-start': 741,
        'selection_end': 741,
        'selection_start': 741},
                          loc('smart_labeler.py'): {'attrib-starts': [('Mult'\
        'iLabelerWithClassifier',
        5),
        ('MultiLabelerWithClassifier.trainCls',
         20)],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 23,
        'sel-line-start': 1031,
        'selection_end': 1068,
        'selection_start': 1068},
                          loc('utils_images.py'): {'attrib-starts': [('confu'\
        'sionMat',
        8)],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 12,
        'sel-line-start': 355,
        'selection_end': 355,
        'selection_start': 355}},
        'has-focus': False},
                               'open_files': [u'make_roi.py',
        u'smart_labeler.py',
        u'utils_images.py',
        u'annotation.py',
        u'apply_classifier_to_topic.py',
        u'classifiers.py',
        u'../comm/comm.py',
        u'comm_pcd2jpg.py',
        u'cv_drawing.py',
        u'interactive_roi.py',
        u'interactive_segmentation.py',
        u'label_images.py',
        u'experiments/try_skeletonization2.py',
        u'experiments/get_table.py']},
        'split_percents': {0: 0.44385499557913349},
        'splits': 2,
        'tab_location': 'top',
        'user_data': {}},
                 'split_percents': {0: 0.68812260536398473},
                 'splits': 2,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (40,
                         88,
                         1480,
                         1458)}]}
guimgr.recent-documents = [loc('experiments/get_table.py'),
                           loc('experiments/try_skeletonization2.py'),
                           loc('label_images.py'),
                           loc('interactive_segmentation.py'),
                           loc('interactive_roi.py'),
                           loc('cv_drawing.py'),
                           loc('comm_pcd2jpg.py'),
                           loc('../comm/comm.py'),
                           loc('classifiers.py'),
                           loc('apply_classifier_to_topic.py'),
                           loc('annotation.py'),
                           loc('utils_images.py'),
                           loc('make_roi.py'),
                           loc('smart_labeler.py')]
guimgr.visual-state = {loc('../comm/apply_script_to_topic.py'): {'attrib-sta'\
        'rts': [],
        'first-line': 5,
        'folded-linenos': [],
        'sel-line': 33,
        'sel-line-start': 891,
        'selection_end': 900,
        'selection_start': 900},
                       loc('apply_classifier_to_topic.py'): {'attrib-starts': [],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 19,
        'sel-line-start': 367,
        'selection_end': 407,
        'selection_start': 407},
                       loc('matlab_image_processing.py'): {'attrib-starts': [(''\
        'skeletonize',
        22)],
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 22,
        'sel-line-start': 599,
        'selection_end': 619,
        'selection_start': 619}}
proj.env-vars = {None: ('default',
                        ['']),
                 loc('make_roi.py'): ('project',
                                      [''])}
proj.pypath = {None: ('custom',
                      '/home/joschu/python/:')}
search.replace-history = [u'mlab.set(']
search.search-history = [u'get_ro',
                         u'train',
                         u'ximages',
                         u'sesh',
                         u'ratio',
                         u'postpro',
                         u'mlabraw.put(self.sesh,',
                         u'downsamp',
                         u'border',
                         u'bord',
                         u'back',
                         u'sel',
                         u'disk',
                         u'find',
                         u'images',
                         u'bgr',
                         u'writefi',
                         u'quit']
