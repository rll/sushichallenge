
import numpy as np
import openravepy as rave
from numpy import inf, zeros, dot, pi,r_, sqrt, linspace
from numpy.linalg import norm, inv
import scipy.interpolate as si
import roslib
import conversions as conv
from retiming import  make_traj_with_limits
import traj_utils as tu
from threading import Thread

roslib.load_manifest("std_msgs")
roslib.load_manifest("trajectory_msgs"); import trajectory_msgs.msg as tm
roslib.load_manifest("sensor_msgs"); import sensor_msgs.msg as sm
roslib.load_manifest("pr2_controllers_msgs"); import pr2_controllers_msgs.msg as pcm
roslib.load_manifest("actionlib"); import actionlib
roslib.load_manifest("rospy"); import rospy
roslib.load_manifest("geometry_msgs"); import geometry_msgs.msg as gm           
roslib.load_manifest("move_base_msgs"); import move_base_msgs.msg as mbm           
roslib.load_manifest("tf"); import tf



           
def make_joint_trajectory_with_duration(positions, total_time):
    raise NotImplementedError
  
class IKFail(Exception):
    pass

class TopicListener(object):
    "stores last message"
    last_msg = None
    def __init__(self,topic_name,msg_type):
        self.sub = rospy.Subscriber(topic_name,msg_type,self.callback)        
        
        rospy.loginfo('waiting for the first message: %s'%topic_name)
        while self.last_msg is None: rospy.sleep(.01)
        rospy.loginfo('ok: %s'%topic_name)
        
    def callback(self,msg):
        self.last_msg = msg

class PR2(object):

    wait = True

    def __init__(self):

        if rospy.get_name() == "/unnamed": # for ipython convenience
            rospy.init_node("pr2",disable_signals=True,anonymous=True)

        # set up openrave
        self.env = rave.Environment()
        self.env.Load("robots/pr2-beta-static.zae") # todo: use up-to-date urdf
        self.robot = self.env.GetRobots()[0]  

        self.joint_listener = TopicListener("/joint_states", sm.JointState)
        self.tf_listener = tf.TransformListener()
        
               
        # rave to ros conversions
        joint_msg = self.get_last_joint_message()        
        ros_names = joint_msg.name                
        inds_ros2rave = np.array([self.robot.GetJointIndex(name) for name in ros_names])
        self.good_ros_inds = np.flatnonzero(inds_ros2rave != -1) # ros joints inds with matching rave joint
        self.rave_inds = inds_ros2rave[self.good_ros_inds] # openrave indices corresponding to those joints
        self.update_rave()

        self.larm = Arm(self, "l")
        self.rarm = Arm(self, "r")
        self.lgrip = Gripper(self, "l")
        self.rgrip = Gripper(self, "r")
        self.head = Head(self)
        self.torso = Torso(self)
        self.base = Base(self)

    def get_last_joint_message(self):
        return self.joint_listener.last_msg
    def update_rave(self, use_map = False):
        ros_values = self.get_last_joint_message().position        
        rave_values = [ros_values[i_ros] for i_ros in self.good_ros_inds]        
        self.robot.SetJointValues(rave_values[:20],self.rave_inds[:20])
        self.robot.SetJointValues(rave_values[20:],self.rave_inds[20:])   
        
        if use_map:
            (trans,rot) = self.tf_listener.lookupTransform('/map', '/base_link', rospy.Time(0))            
            self.robot.SetTransform(conv.trans_rot_to_hmat(trans, rot))            
        
VEL_RATIO = .2
ACC_RATIO = .3
    
class TrajectoryControllerWrapper(object):

    def __init__(self, pr2, controller_name):
        self.pr2 = pr2
        
        self.joint_names = rospy.get_param("/%s/joints"%controller_name)

        self.n_joints = len(self.joint_names)
        
        msg = self.pr2.get_last_joint_message()
        self.ros_joint_inds = [msg.name.index(name) for name in self.joint_names]
        self.rave_joint_inds = [pr2.robot.GetJointIndex(name) for name in self.joint_names]
        
        self.controller_pub = rospy.Publisher("%s/command"%controller_name, tm.JointTrajectory)        
        
        all_vel_limits = self.pr2.robot.GetDOFVelocityLimits()
        self.vel_limits = [all_vel_limits[i_rave]*VEL_RATIO for i_rave in self.rave_joint_inds]
        all_acc_limits = self.pr2.robot.GetDOFVelocityLimits()
        self.acc_limits = [all_acc_limits[i_rave]*ACC_RATIO for i_rave in self.rave_joint_inds]
        
    def get_joint_positions(self):
        msg = self.pr2.get_last_joint_message()
        return [msg.position[i] for i in self.ros_joint_inds]

    
    def goto_joint_positions(self, positions_goal):
        
        positions_cur = self.get_joint_positions()
        assert len(positions_goal) == len(positions_cur)

        duration = norm((r_[positions_goal] - r_[positions_cur])/self.vel_limits, ord=inf)
                
        jt = tm.JointTrajectory()
        jt.joint_names = self.joint_names
        jt.header.stamp = rospy.Time.now()
        
        jtp = tm.JointTrajectoryPoint()
        jtp.positions = positions_goal
        jtp.velocities = zeros(len(positions_goal))
        jtp.time_from_start = rospy.Duration(duration)
        
        jt.points = [jtp]
        self.controller_pub.publish(jt)

        rospy.loginfo("sleeping %.2f sec"%duration)
        if self.pr2.wait: rospy.sleep(duration)
            
    def follow_joint_traj(self, positions, duration = None):
        positions = np.r_[np.atleast_2d(self.get_joint_positions()), positions]
        positions[:,4] = np.unwrap(positions[:,4])
        positions[:,6] = np.unwrap(positions[:,6])
        positions, velocities, times = make_traj_with_limits(positions, self.vel_limits, self.acc_limits,smooth=True)                    
        self.follow_timed_joint_traj(positions, velocities, times)
        
    def follow_timed_joint_traj(self, positions, velocities, times):
        jt = tm.JointTrajectory()
        jt.joint_names = self.joint_names
        jt.header.stamp = rospy.Time.now()
        
        for (position, velocity, time) in zip(positions, velocities, times):
            jtp = tm.JointTrajectoryPoint()
            jtp.positions = position
            jtp.velocities = velocity
            jtp.time_from_start = rospy.Duration(time)
            jt.points.append(jtp)
            
        self.controller_pub.publish(jt)
        if self.pr2.wait: rospy.sleep(times[-1])
            

def mirror_arm_joints(x):
    "mirror image of joints (r->l or l->r)"
    return r_[-x[0],x[1],-x[2],x[3],-x[4],x[5],-x[6]]

class Arm(TrajectoryControllerWrapper):

    L_POSTURES = dict(        
        untucked = [0.4,  1.0,   0.0,  -2.05,  0.0,  -0.1,  0.0],
        tucked = [0.06, 1.25, 1.79, -1.68, -1.73, -0.10, -0.09],
        up = [ 0.33, -0.35,  2.59, -0.15,  0.59, -1.41, -0.27],
        side = [  1.832,  -0.332,   1.011,  -1.437,   1.1  ,  -2.106,  3.074]
        )

    
    
    def __init__(self, pr2, lr):
        TrajectoryControllerWrapper.__init__(self,pr2, "%s_arm_controller"%lr)
        self.lr = lr
        self.lrlong = {"r":"right", "l":"left"}[lr]
        self.tool_frame = "%s_gripper_tool_frame"%lr
        
        self.manip = pr2.robot.GetManipulator("%sarm"%self.lrlong)
        
        self.cart_command = rospy.Publisher('%s_cart/command_pose'%lr, gm.PoseStamped)
        

    def goto_posture(self, name):
        l_joints = self.L_POSTURES[name]        
        joints = l_joints if self.lr == 'l' else mirror_arm_joints(l_joints)
        self.goto_joint_positions(joints)

    def goto_joint_positions(self, positions_goal):
        positions_cur = self.get_joint_positions()        
        positions_goal = tu.closer_joint_angles(positions_goal, positions_cur)
        TrajectoryControllerWrapper.goto_joint_positions(self, positions_goal)


    def transform_relative_pose_for_ik(self, matrix4, ref_frame, targ_frame):
        self.pr2.update_rave()

        ee = self.manip.GetEndEffector()
        ref = self.pr2.robot.GetLink(ref_frame)
        targ = self.pr2.robot.GetLink(targ_frame)
        
        worldFromEE = ee.GetTransform()        
        worldFromRef = ref.GetTransform()
        worldFromTarg = targ.GetTransform()
        
        targFromEE = dot(inv(worldFromTarg), worldFromEE)       
        
        refFromTarg_new = matrix4
        
        worldFromEE_new = dot(dot(worldFromRef, refFromTarg_new), targFromEE)
                                
        return worldFromEE_new
        
    def set_cart_target(self, quat, xyz, ref_frame):
        ps = gm.PoseStamped()
        ps.header.frame_id = ref_frame
        ps.header.stamp = rospy.Time(0)
        ps.pose.position = gm.Point(*xyz);
        ps.pose.orientation = gm.Quaternion(*quat)
        self.cart_command.publish(ps)
        
    def goto_pose_matrix(self, matrix4, ref_frame, targ_frame, filter_options = 0): 
        """
        IKFO_CheckEnvCollisions = 1
        IKFO_IgnoreSelfCollisions = 2
        IKFO_IgnoreJointLimits = 4
        IKFO_IgnoreCustomFilters = 8
        IKFO_IgnoreEndEffectorCollisions = 16
        """                               
        worldFromEE = self.transform_relative_pose_for_ik(matrix4, ref_frame, targ_frame)        
        joint_positions = self.manip.FindIKSolution(worldFromEE, filter_options)
        if joint_positions is not None: self.goto_joint_positions(joint_positions)
        else: raise IKFail
        
    def get_pose_matrix(self, ref_frame, targ_frame):
        self.pr2.update_rave()
        
        worldFromRef = self.pr2.robot.GetLink(ref_frame).GetTransform()
        worldFromTarg = self.pr2.robot.GetLink(targ_frame).GetTransform()
        refFromTarg = dot(inv(worldFromRef), worldFromTarg)
        
        return refFromTarg

        
class Head(TrajectoryControllerWrapper):
    def __init__(self, pr2):
        TrajectoryControllerWrapper.__init__(self,pr2,"head_traj_controller")
        
    def set_pan_tilt(self, pan, tilt):
        self.goto_joint_positions([pan, tilt])
    def look_at(self, xyz_target, reference_frame, camera_frame):
        self.pr2.update_rave()
        
        worldFromRef = self.pr2.robot.GetLink(reference_frame).GetTransform()
        worldFromCam = self.pr2.robot.GetLink(camera_frame).GetTransform()
        refFromCam = dot(inv(worldFromRef), worldFromCam)        
        
        xyz_cam = refFromCam[:3,3]
        ax = xyz_target - xyz_cam # pointing axis
        pan = np.arctan(ax[1]/ax[0])
        tilt = np.arcsin(-ax[2] / norm(ax))
        self.set_pan_tilt(pan,tilt)
        
        
class Torso(TrajectoryControllerWrapper):
    def __init__(self,pr2):
        TrajectoryControllerWrapper.__init__(self,pr2, "torso_controller")
        self.torso_client = actionlib.SimpleActionClient('torso_controller/position_joint_action', pcm.SingleJointPositionAction)
        self.torso_client.wait_for_server()

    def set_height(self, h):
        self.torso_client.send_goal(pcm.SingleJointPositionGoal(position = h))
        self.torso_client.wait_for_result() # todo: actually check result
    # def goto_joint_positions(self, positions_goal):
    #     self.set_height(positions_goal[0])
    def go_up(self):
        self.set_height(.195)
    def go_down(self):
        self.set_height(.02)        
        
        
class Gripper(object):
    default_max_effort = -1
    def __init__(self,pr2,lr):
        self.pr2 = pr2
        self.lr = lr
        self.controller_name = "%s_gripper_controller"%self.lr
        self.joint_names = [rospy.get_param("/%s/joint"%self.controller_name)]
        self.n_joints = len(self.joint_names)
        
        msg = self.pr2.get_last_joint_message()
        self.ros_joint_inds = [msg.name.index(name) for name in self.joint_names]
        self.rave_joint_inds = [pr2.robot.GetJointIndex(name) for name in self.joint_names]
        
        self.controller_pub = rospy.Publisher("%s/command"%self.controller_name, pcm.Pr2GripperCommand)        
                
        self.grip_client = actionlib.SimpleActionClient('%s_gripper_controller/gripper_action'%lr, pcm.Pr2GripperCommandAction)
        self.grip_client.wait_for_server()
    def set_angle(self, a, max_effort = default_max_effort):
        self.grip_client.send_goal(pcm.Pr2GripperCommandGoal(pcm.Pr2GripperCommand(position=a,max_effort=max_effort)))
        if self.wait: self.grip_client.wait_for_result()            
    def open(self, max_effort=default_max_effort):
        self.set_angle(.08, max_effort = max_effort)
    def close(self,max_effort=default_max_effort):
        self.set_angle(0, max_effort = max_effort)        
    def set_angle_goal(self, position, max_effort = default_max_effort):
        self.controller_pub.publish(pcm.Pr2GripperCommand(position=position,max_effort=max_effort))
    def follow_timed_trajectory(self, angs, times):
        Thread(target = self._follow_trajectory_loop, args = (angs, times)).start()
    def _follow_trajectory_loop(self, angs,times):
        for i in xrange(len(times)-1):
            if rospy.is_shutdown(): break            
            self.set_angle_goal(times[i])
            rospy.sleep(times[i+1] - times[i])            
        self.set_angle_goal(angs[-1])
        
        
class Base(object):
    
    def __init__(self, pr2):
        self.pr2 = pr2
        self.action_client = actionlib.SimpleActionClient('move_base',mbm.MoveBaseAction)
        self.command_pub = rospy.Publisher('base_controller/command', gm.Twist)        
        self.traj_pub = rospy.Publisher("base_traj_controller/command", tm.JointTrajectory)
        
    def set_pose(self, trans, rot):
        raise NotImplementedError
        goal = mbm.MoveBaseGoal()
        goal.target_pose = ps
        rospy.loginfo('Sending move base goal')
        finished = self.action_client.send_goal_and_wait(goal)
        rospy.loginfo('Move base action returned %d.' % finished)
        return finished 
    
    def get_pose(self):
        trans, rot =  self.pr2.tf_listener.lookupTransform("/map","/base_footprint",rospy.Time(0))
        return (trans[0], trans[1], conv.quat_to_yaw(rot))
    
    def set_twist(self,xya):
        vx, vy, omega = xya
        twist = gm.Twist()
        twist.linear.x = vx
        twist.linear.y = vy
        twist.angular.z = omega
        self.command_pub.publish(twist)
    def follow_timed_trajectory(self, xyas, times):
        jt = tm.JointTrajectory()
        n = len(xyas)
        assert len(times) == n
        for i in xrange(n):
            
            jtp = tm.JointTrajectoryPoint()
            jtp.time_from_start = rospy.Duration(ts[i])
            jtp.positions = xyas[i]
            jt.points.append(jtp)
            
        traj_pub.publish(jt)
