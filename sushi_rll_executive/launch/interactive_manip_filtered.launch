<launch>
  <arg name="stereo" default="false" />
  <arg name="nav_local" default="false" />
  <arg name="nav_3d" default="true" />
  <arg name="use_slip_controllers" default="false"/>
  <arg name="use_right_arm" default="true"/>
  <arg name="use_left_arm"  default="true"/>
  <arg name="use_task_cartesian" default="false" />
  <arg name="use_jinv" default="false" />
  <arg name="sim" default="false" />
  <arg name="double_menu" default="false" />
  <arg name="kinect_frame_prefix" default="/openni"/>
  <arg name="slow_movement" default="false" />
  <arg name="cvfh" default="false" />
  <arg name="tod" default="false" />
  <arg name="flatten_table" default="false"/>	
  <arg name="model_set" default="SUSHI_MODEL_SET"/>
  <arg name="use_probabilistic_grasp_planner" default="false"/>

  <!-- rviz camera configurations -->
  <rosparam command="load" file="$(find pr2_object_manipulation_launch)/config/camera_configurations.yaml"/>

  <!-- interactive manipulation backend -->
  <!--
  <node pkg="pr2_interactive_manipulation" type="interactive_manipulation_backend_node"
   name="interactive_manipulation_backend_node" respawn="false" output="screen">

    <remap from="right_arm/constraint_aware_ik" to="/pr2_right_arm_kinematics/get_constraint_aware_ik" />    
    <remap from="left_arm/constraint_aware_ik" to="/pr2_left_arm_kinematics/get_constraint_aware_ik" />    
      
    <remap from="right_arm/get_ik_solver_info" to="/pr2_right_arm_kinematics/get_ik_solver_info" />    
    <remap from="left_arm/get_ik_solver_info" to="/pr2_left_arm_kinematics/get_ik_solver_info" />    
      
    <remap from="right_arm/get_state_validity" to="/environment_server_right_arm/get_state_validity" />    
    <remap from="left_arm/get_state_validity" to="/environment_server_left_arm/get_state_validity" />    
      
    <remap from="right_arm/move_arm" to="/move_right_arm" />    
    <remap from="left_arm/move_arm" to="/move_left_arm" />    
      
    <remap from="right_arm/hand_posture_execution" to="/r_gripper_grasp_posture_controller" />    
    <remap from="left_arm/hand_posture_execution" to="/l_gripper_grasp_posture_controller" />    
      
    <remap from="right_arm/grasp_status" to="/r_gripper_grasp_status" />
    <remap from="left_arm/grasp_status" to="/l_gripper_grasp_status" />
      
    <remap from="right_arm/joint_trajectory" to="/r_arm_controller/joint_trajectory_action" />
    <remap from="left_arm/joint_trajectory" to="/l_arm_controller/joint_trajectory_action" />

    <remap from="switch_controller" to="pr2_controller_manager/switch_controller"/>
    <remap from="list_controllers" to="pr2_controller_manager/list_controllers"/>      
    <remap from="right_arm/cart/command_pose" to="/r_cart/command_pose" />
    <remap from="left_arm/cart/command_pose" to="/l_cart/command_pose" />
    <remap from="right_arm/cart/command_posture" to="/r_cart/command_posture" />
    <remap from="left_arm/cart/command_posture" to="/l_cart/command_posture" />
    <remap from="right_arm/cart/gains" to="/r_cart/gains" />
    <remap from="left_arm/cart/gains" to="/l_cart/gains" />
    <param name="right_arm_cartesian_controller" value="r_cart" /> 
    <param name="left_arm_cartesian_controller" value="l_cart" />
    <param name="right_arm_joint_controller" value="r_arm_controller" />
    <param name="left_arm_joint_controller" value="l_arm_controller" />

    <remap unless="$(arg use_slip_controllers)" from="left_arm/gripper_action" 
                                                to="/l_gripper_controller/gripper_action"/>
    <remap unless="$(arg use_slip_controllers)" from="right_arm/gripper_action" 
                                                to="/r_gripper_controller/gripper_action"/>

    <remap if="$(arg use_slip_controllers)" from="left_arm/gripper_action" 
                                            to="/l_gripper_sensor_controller/gripper_action"/>
    <remap if="$(arg use_slip_controllers)" from="right_arm/gripper_action" 
                                            to="/r_gripper_sensor_controller/gripper_action"/>

    <param name="get_model_mesh_srv" value="/objects_database_node/get_model_mesh" />

    <param name="cartesian_dist_tol" value="0.001" />
    <param name="cartesian_angle_tol" value="0.05" />
    <param name="cartesian_overshoot_dist" value="0.005" />
    <param name="cartesian_overshoot_angle" value="0.087" />

    <remap from="/get_pose_server" to="/pr2_interactive_gripper_pose_action" />

    <remap if="$(arg nav_local)" from="/move_base" to="/move_base_local" />
  </node>
  -->


  <!-- pr2_interactive_gripper_pose_action -->
  <!--
  <include file="$(find pr2_interactive_gripper_pose_action)/launch/pr2_interactive_gripper_pose_action.launch" >
    <arg name="double_menu" value="$(arg double_menu)"/>
    <arg name="planner_action" value="segmented_clutter_grasp_planner_server" />
  </include>
  -->

  <!-- cloud server -->
  <include file="$(find point_cloud_server)/launch/cloud_server.launch" >
    <arg name="stereo" value="$(arg stereo)"/>
  </include>
  
  <!-- Interactive object detection backend node -->
  <!--
  <node name="pr2_interactive_object_detection_backend" type="pr2_interactive_object_detection_backend" 
    pkg="pr2_interactive_object_detection" output="screen" respawn="false">
    <remap from="tabletop_detection" to="object_recognition_translated"/>
    <param if="$(arg tod)" name="min_marker_quality" value="0.003" />
    <param unless="$(arg tod)" name="min_marker_quality" value="0.003" />
    <param name="robot_reference_frame_id" value="base_link" />
    <param name="table_x" value="1" />
    <param name="table_y" value="0" />
    <param name="table_z" value="0" />
    <param name="table_thickness" value=".01"/>
  </node>
  -->

  <!-- grasp_adjust action server -->
  <include file="$(find pr2_grasp_adjust)/launch/grasp_adjust_action_server.launch" />

  <!-- segmented_clutter_grasp_planner action server -->
  <include file="$(find segmented_clutter_grasp_planner)/launch/segmented_clutter_grasp_planner_server.launch" />

  <!-- Kinect -->
  <group unless="$(arg stereo)">
  
    <!-- RGB-D assembly -->
    <include file="$(find rgbd_assembler)/launch/rgbd_kinect_assembler.launch"/> 
    
  </group>


</launch>
