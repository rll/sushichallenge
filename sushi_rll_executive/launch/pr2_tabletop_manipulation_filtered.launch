<launch>
  <!-- set stereo to true for narrow stereo, false for kinect -->
  <arg name="stereo" default="false" />
  <arg name="use_slip_controllers" default="false"/>
  <arg name="use_right_arm" default="true"/>
  <arg name="use_left_arm" default="true"/>
  <arg name="use_task_cartesian" default="false"/>
  <arg name="log_to_warehouse" default="false"/>
  <arg name="flatten_table" default="false"/>
  <arg name="kinect_frame_prefix" default="/openni"/>
  <arg name="model_set" default="SUSHI_MODEL_SET"/>
  <arg name="tabletop_segmentation_convert_to_base_link" default="true" />
  <arg name="tabletop_segmentation_clustering_voxel_size" default="0.003" />
  <arg name="table_padding" default="0.02"/>

  <!-- client for object database running on remote server at Willow Garage -->
  <!-- DOES NOT WORK IN TRUNK RIGHT NOW -->
  
  <!--include file="$(find household_objects_database)/launch/objects_database_remote_client.launch"/-->
  <include file="$(find sushi_rll_executive)/launch/objects_database.launch"/>
  

  <!-- alternative option: database server running on a local machine -->
<!--
  <param name="/household_objects_database/database_host" value="localhost"/>
  <param name="/household_objects_database/database_port" value="5432"/>
  <param name="/household_objects_database/database_user" value="willow"/>
  <param name="/household_objects_database/database_pass" value="willow"/>
  <param name="/household_objects_database/database_name" value="household_objects"/>
  <node pkg="household_objects_database" name="objects_database_node" type="objects_database_node" 
  	respawn="true" output="screen"/>    
-->

  <!-- manipulation prerequisites -->
  <include file="$(find sushi_executive)/launch/pr2_manipulation_prerequisites.launch">
    <arg name="stereo" value="$(arg stereo)"/>    
    <arg name="use_left_arm" value="$(arg use_left_arm)"/>    
    <arg name="use_right_arm" value="$(arg use_right_arm)"/>    
    <arg name="log_to_warehouse" value="$(arg log_to_warehouse)"/>
    <arg name="kinect_frame_prefix" value="$(arg kinect_frame_prefix)"/>
  </include>

  <!-- manipulation -->
  <include file="$(find pr2_object_manipulation_launch)/launch/pr2_manipulation.launch">
    <arg name="use_slip_controllers" value="$(arg use_slip_controllers)"/>
    <arg name="use_left_arm" value="$(arg use_left_arm)"/>
    <arg name="use_right_arm" value="$(arg use_right_arm)"/>
    <arg name="use_task_cartesian" value="$(arg use_task_cartesian)"/>

  </include>
  <param name="/object_manipulator/default_database_planner" 
         value="/plan_point_cluster_grasp" />

  <!-- We didn't use this grasp planner for the demo. This is the bad database -->
  <param name="/object_manipulator/default_database_planner" 
         value="/database_grasp_planning" />

  <!-- This is this trusty planner for the demo -->
  <!--param name="/object_manipulator/default_robust_planner" 
         value="/plan_robust_grasp" /-->

  <!-- tabletop collision map processing -->
  <node pkg="tabletop_collision_map_processing" name="tabletop_collision_map_processing" 
        type="tabletop_collision_map_processing_node" respawn="false" output="screen"/>
  <param name="tabletop_collision_map_processing/get_model_mesh_srv" 
         value="/objects_database_node/get_model_mesh" />
  <param name="tabletop_collision_map_processing/static_map_cloud_name" value="full_cloud_filtered" />

  <!-- tabletop segmentation and object recognition -->
  <!--
  <include file="$(find tabletop_object_detector)/launch/tabletop_complete.launch">
      <arg unless="$(arg stereo)" name="tabletop_segmentation_points_input" value="camera/depth/points_filtered"/>
      <arg if="$(arg stereo)" name="tabletop_segmentation_points_input" value="narrow_stereo_textured/points2"/>
      <arg name="flatten_table" value="$(arg flatten_table)"/>
      <arg name="model_set" value="$(arg model_set)" />      
  </include>
  -->

  <!-- segmentation -->
  <!--
  <include file="$(find tabletop_object_detector)/launch/tabletop_segmentation.launch">
      <arg unless="$(arg stereo)" name="tabletop_segmentation_points_in" value="camera/depth/points_filtered"/>
      <arg if="$(arg stereo)" name="tabletop_segmentation_points_in" value="narrow_stereo_textured/points2"/>
      <arg name="flatten_table" value="$(arg flatten_table)"/>
  </include>
  -->

  <node pkg="tabletop_object_detector" name="tabletop_segmentation" type="tabletop_segmentation" respawn="true" output="screen">
        <!--topic remapping-->
	<remap unless="$(arg stereo)" from="cloud_in" to="camera/rgb/points_filtered"/>
        <remap if="$(arg stereo)" from="tabletop_segmentation_points_in" to="narrow_stereo_textured/points2"/>
        <!-- <remap from="cloud_in" to="$(arg tabletop_segmentation_points_in)" /> -->
        <remap from="segmentation_srv" to="tabletop_segmentation" />
        <remap from="markers_out" to="tabletop_segmentation_markers" />

        <param name="clustering_voxel_size" value="$(arg tabletop_segmentation_clustering_voxel_size)" />
        <param name="inlier_threshold" value="300" />
        <param name="plane_detection_voxel_size" value="0.01" />
        <param name="cluster_distance" value="0.03" />
        <param name="min_cluster_size" value="300" />
        <param name="flatten_table" value="$(arg flatten_table)" />
        <param name="table_padding" value="$(arg table_padding)" />

        <!-- processing and filtering frame -->
        <!-- all clouds converted to and processed in base link frame -->
        <param if="$(arg tabletop_segmentation_convert_to_base_link)" name="processing_frame" value="base_link" />
        <param if="$(arg tabletop_segmentation_convert_to_base_link)" name="up_direction" value="1.0" />
        <param if="$(arg tabletop_segmentation_convert_to_base_link)" name="z_filter_min" value="0.0" />
        <param if="$(arg tabletop_segmentation_convert_to_base_link)" name="z_filter_max" value="10.0" />
        <param if="$(arg tabletop_segmentation_convert_to_base_link)" name="y_filter_min" value="-1.2" />
        <param if="$(arg tabletop_segmentation_convert_to_base_link)" name="y_filter_max" value="1.2" />
        <param if="$(arg tabletop_segmentation_convert_to_base_link)" name="x_filter_min" value="0.3" />
        <param if="$(arg tabletop_segmentation_convert_to_base_link)" name="x_filter_max" value="10.0" />
        <param if="$(arg tabletop_segmentation_convert_to_base_link)" name="table_z_filter_min" value="-0.5" />
        <param if="$(arg tabletop_segmentation_convert_to_base_link)" name="table_z_filter_max" value="-0.01" />

        <!-- all clouds will be processed in the incoming frame, which is -->
        <!-- assumed to the the camera's optical frame -->
        <param unless="$(arg tabletop_segmentation_convert_to_base_link)" name="processing_frame" value="" />
        <param unless="$(arg tabletop_segmentation_convert_to_base_link)" name="up_direction" value="-1.0" />
        <param unless="$(arg tabletop_segmentation_convert_to_base_link)" name="z_filter_min" value="0.4" />
        <param unless="$(arg tabletop_segmentation_convert_to_base_link)" name="z_filter_max" value="1.25" />
        <param unless="$(arg tabletop_segmentation_convert_to_base_link)" name="y_filter_min" value="-1.2" />
        <param unless="$(arg tabletop_segmentation_convert_to_base_link)" name="y_filter_max" value="1.2" />
        <param unless="$(arg tabletop_segmentation_convert_to_base_link)" name="x_filter_min" value="-1.2" />
        <param unless="$(arg tabletop_segmentation_convert_to_base_link)" name="x_filter_max" value="1.2" />
        <param unless="$(arg tabletop_segmentation_convert_to_base_link)" name="table_z_filter_min" value="0.01" />
        <param unless="$(arg tabletop_segmentation_convert_to_base_link)" name="table_z_filter_max" value="0.5" />

    </node>

  <!-- object recognition -->
  <include file="$(find tabletop_object_detector)/launch/tabletop_object_recognition.launch">
      <arg name="model_set" value="$(arg model_set)" />
  </include>

        <!--complete node -->
  <node pkg="tabletop_object_detector" name="tabletop_complete_node" type="tabletop_complete_node"
        respawn="true" output="screen">
      <param name="perform_fit_merge" value="true" />
  </node>


</launch>
